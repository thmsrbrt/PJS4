import {
    createUser, createUtilisateur, deleteUtilisateurById,
    findAllUtilisateurs, findOneUtilisateurByEmailPSD,
    findOneUtilisateurByID,
    updateUserToken,
    updateUtilisateur
} from "../models/UtilisateurModel";
import crypto from "crypto"; // prendre les connexions à la BDD correspondantes

export const findAllUtilisateur = (req, res) => {
    if (req.user) {
        findAllUtilisateurs(res, (err, data) => {
            if (err)
                err.erreur === "not_found" ? res.status(404).send({message: 'Utilisateur non trouvé'}): res.status(500).send({message: "Erreur"});
            else
                res.status(200).send(data);
        });
    } else {
        res.status(500).end("pas connecté en session");
    }
}

/**
 * Méthode permettant de trouver un utilisateur à partir d'un id
 * @param req Request venant de ExpressJS
 * @param res Response venant de ExpressJS
 * @response Code HTTP 500 si erreur, 404 si user non trouvé et 200 si trouvé
 */
export const findUtilisateur = (req, res) => {
    if (req.query.id == null)
        res.status(500).send({message: "Erreur, id null"});
    else
        findOneUtilisateurByID(req.query.id, (err, data) => {
            if (err)
                err.erreur === "not_found" ? res.status(404).send({message: 'Utilisateur non trouvé'}): res.status(500).send({message: "Erreur"});
            else
                res.status(200).send(data);
        });

}

export const updateUtilisateurs = (req, res) => {
    const objPOST = req.body;
    if (objPOST.id === "" || typeof objPOST.id === 'undefined') {
        console.error("erreur pas d'id utilisateur");
        res.status(500).end("Erreur : pas d'id utilisateur !");
    } else {
        var updateString = "";
        if (objPOST.email !== "" || typeof objPOST.email !== 'undefined') {
            if (updateString.length === 0) {
                updateString += "email = '" + objPOST.email + "'";
            } else {
                updateString += ", email = '" + objPOST.email + "'";
            }
        }
        if (objPOST.mdp !== "" || typeof objPOST.mdp !== 'undefined') {
            if (updateString.length === 0) {
                updateString += "MotDePasse = '" + objPOST.mdp + "'";
            } else {
                updateString += ", MotDePasse = '" + objPOST.mdp + "'";
            }
        }
        if (objPOST.photoprofile !== "" || typeof objPOST.photoprofile !== 'undefined') {
            if (updateString.length === 0) {
                updateString += "photoprofile = '" + objPOST.photo + "'";
            } else {
                updateString += ", photoprofile = '" + objPOST.photoprofile + "'";
            }
        }
        if (objPOST.description !== "" || typeof objPOST.description !== 'undefined') {
            if (updateString.length === 0) {
                updateString += "description = '" + objPOST.description + "'";
            } else {
                updateString += ", description = '" + objPOST.description + "'";
            }
        }
        if (objPOST.cvfile !== "" || typeof objPOST.cvfile !== 'undefined') {
            if (updateString.length === 0) {
                updateString += "cvfile = '" + objPOST.cvfile + "'";
            } else {
                updateString += ", cvfile = '" + objPOST.cvfile + "'";
            }
        }
        updateUtilisateur(updateString, objPOST.id, (err, data) => {
            if (err)
                err.erreur === "not_found" ? res.status(404).send({message: 'Update non réussi'}) : res.status(500).send({message: "Erreur"});
            else
                res.status(200).end("Update validée avec validation !");
        });
    }
}


/**
 * Méthode permettant d'ajouter un utilisateur dans la base
 * @response Code HTTP 500 si erreur
 */
export const addUtilisateurs = (req, res) => {
    const objPOST = req.body;
    if (objPOST.nom === '' || objPOST.prenom === '' || objPOST.email === '' || objPOST.mdp === '' || objPOST.type === '' || objPOST.photoprofile === '' || objPOST.description === '' ||objPOST.cvfile === '' ) {
        console.error("erreur url");
        res.status(500).send("Erreur au niveau des paramètres de l'URL !");
    } else { // cas optionnel
        var tabVal = [objPOST.nom, objPOST.prenom, objPOST.email, objPOST.mdp, objPOST.type, objPOST.photoprofile, objPOST.description, objPOST.cvfile];
        createUtilisateur(tabVal, res);
    }
}

/**
 * Méthode permettant de supprimer un utilisateur
 */
export const deleteUtilisateurs = (req, res) => {
    const id = req.params.id;
    req.user.id;
    deleteUtilisateurById(id, res);
}

